// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        // supporting 0 sized string ???
        if (maxLength = 0){
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;    // go back
        let str[length] = 32;       // print ' '
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        
        var int i, x, sum, multiplier;
        var int c;

        let i = 0;
        let sum = 0;
        let c = str[i];
        let x = c-48;            // int value
        if (c = 45){                 // handling '-' sign at str[0]
            let multiplier = -1;
            let i = i+1;
            let c = str[i];          // read next (first digit)
            let x = c-48;            // int value

        } else {
            let multiplier = 1;
        }

        while ( (~(x<0)) & (x<10)) { // if digit (digits ascii code is 48-57 ( represents 0-9))
            let sum = (10*sum) + x;
            let i = i+1;
            let c = str[i];          // read next (first digit)
            let x = c-48;            // int value
        }
        return sum * multiplier;   
    }

    /** Sets this string to hold a representation of the given value. */
    // the method first check for a '-' sign, then it collects digits from left to 
    // right (by / and %) and appends the digit+48 (char representation of 0-9).
    method void setInt(int val) {
        var int temp, leftDigit;

        // set the string indexer to 0 (empty string)
        let length = 0;

        if (val < 0){
            // minus sign
            do appendChar(45);
        }
        let temp = Math.abs(val);
        if (temp > 10000){                    // 5 digit number
            let leftDigit = temp/10000;
            do appendChar(leftDigit+48); // char value of 1 digit int
            // remove leftmost digit
            let temp = temp - (leftDigit*10000);
        }
        if (temp > 1000){                     // 4 digit number
            let leftDigit = temp/1000;
            do appendChar(leftDigit+48); // char value of 1 digit int
            // remove leftmost digit
            let temp = temp - (leftDigit*1000);
        }
        if (temp > 100){                      // 3 digit number
            let leftDigit = temp/100;
            do appendChar(leftDigit+48); // char value of 1 digit int
            // remove leftmost digit
            let temp = temp - (leftDigit*100);
        }
        if (temp > 10){                       // 2 digit number
            let leftDigit = temp/10;
            do appendChar(leftDigit+48); // char value of 1 digit int
            // remove leftmost digit
            let temp = temp - (leftDigit*10);
        }
        do appendChar(temp+48);          // 1 digit number
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    // // non API, calc modulo
    // // n%d can be expressed as n-(n/d*d)
    // function int modulo(int n, int d){
    //     return n - Math.divide(n, (d*d));
    // }

}
