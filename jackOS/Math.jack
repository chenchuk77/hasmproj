// bug with sqrt(x) where x>16383

class Math   {

	static Array twoToThe;

	// init and set global values for the class
	function void init(){
        let twoToThe = Array.new(16);
		let twoToThe[0]  = 1;
		let twoToThe[1]  = 2;
		let twoToThe[2]  = 4;
		let twoToThe[3]  = 8;
		let twoToThe[4]  = 16;
		let twoToThe[5]  = 32;
		let twoToThe[6]  = 64;
		let twoToThe[7]  = 128;
		let twoToThe[8]  = 256;
		let twoToThe[9]  = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
        let twoToThe[15] = (-32767)-1; // -32768 = 100000000000000
                                       // but cant do 32768 because its too big for the compiler
		return;
	}

	//returns absolute value of x (distance from 0)
    function int abs(int x){
        if (x < 0){
        	//return 0 - x;
            return (~x) + 1;  // 2s complement
        }
        return x;
    }

	// Returns true if the j-th bit of the integer x is 1 and false otherwise.
    function boolean bit(int x, int j){
    	// x && 2^j
    	var int rv;
    	let rv = (x & twoToThe[j]);
    	if (rv = 0){
    		return false;
    	}
    	return true;
    }

    // returns x*y , good complexity of O(logN)
    function int multiply(int x, int y){

        var boolean positive;
        var int sum;
        var int bitId;
        var int shiftedX;

        let positive = true;
        // setting a flag for handing negative numbera
        if ((x<0 & y>0) | (x>0 & y<0)) {
            let positive = false;
        }

        // working on positive numbers
        let x = Math.abs(x);
        let y = Math.abs(y);

    	let sum = 0;

    	// init for first iter
		let bitId = 0;
    	let shiftedX = x; // starting point

    	// looping through all digits, adding shifted-x if y-digit=1
    	while (bitId < 15){
            //do Output.printInt(bitId);

    		if (Math.bit(y, bitId)){
    			//do Output.printInt(bitId);
    			let sum = sum + shiftedX;
    		}
    		let shiftedX = Math.shiftLeft(shiftedX);
    		let bitId = bitId + 1;
    	}
        if (positive){
            return sum;
        }
    	return 0 - sum;
    }

    // returns x/y (integer division)
    function int divide(int x, int y){
    	if ((x<0 & y>0) | (x>0 & y<0)){
    		// negative response
    		return (-1) * Math.dividePositives(Math.abs(x), Math.abs(y));
    	}
    	return Math.dividePositives(Math.abs(x), Math.abs(y));
    }

    // returns the square root (int value)
    function int sqrt(int x) {
        var int j, y;

        let y = 0;
        let j = (16/2) - 1;
        while (~(j < 0)) {
            // (y+2^j)^2
            if (~((y + twoToThe[j]) * (y + twoToThe[j]) > x )) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    // returns the max
    function int max(int x, int y){
        if (x > y){ return x; }
        return y;
    }

    // returns the min
    function int min(int x, int y){
        if (x > y){ return y; }
        return x;
    }

    // non API
    // returns x*y , bad complexity of O(N)
    function int multiplySlow(int x, int y){
        var int sum;
        let sum = 0;
        while (x > 0){
        	let sum = sum + y;
        	let x = x - 1;
        }
        return sum;
    }

    // non API
    // returns x/y (positive integer division)
    function int dividePositives(int x, int y){
        var int q;

        if (y > x | y < 0){
            return 0;
        }
        let q = Math.divide (x,  2 * y );
        if (x-( 2 * q * y ) < y){
            return 2 * q;
        } else {
            return (2 * q) + 1;
        }
    }

    // non API
    function int shiftLeft(int x){
        let x = x + x;
        return x;
    }
}